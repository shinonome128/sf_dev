var config = {"settings": {"add_css_file":false , "add_js_file":false , "custom_lang":false , "head_write_js":"" , "head_write_css":"" , "format":"table" , "messages":{"intro":"Salesforce 認定デベロッパー 練習問題"}} ,"questions":[
{"question": "以下のApex変数宣言で正しくないのはどれ？" ,"choice":["Map<ID, String> sampleMap;" ,"Boolean y;" ,"String a,b,c;" ,"Currency abc;"] ,"answer":["Currency abc;"] ,"feedback_tf":["" ,""]}
, {"question": "以下の内、より良い定数宣言はどれ？" ,"choice":["static final Integer privCons = 200;" ,"private String privCons = ‘Private’;" ,"public static String privCons = ‘Private’;" ,"global static Integer privCons = 250;"] ,"answer":["static final Integer privCons = 200;"] ,"feedback_tf":["" ,""]}
, {"question": "以下List初期化宣言の内、正しくないのはどれ？" ,"choice":["List<Account> accList = new List<Account>();" ,"Account[] accList = new Account[]{};" ,"List<Account> new = ‘accList’;" ,"List<Account> accList = new Account[]{};"] ,"answer":["List<Account> new = ‘accList’;"] ,"feedback_tf":["" ,""]}
, {"question": "「testRawScore」が75の時、以下のソースを実行すると何がデバッグ出力される？<pre><br>if (testRawScore >= 90) {<br>    gradeEqual = ‘A’;<br>}<br>if (testRawScore >= 80) {<br>    gradeEqual = ‘B’;<br>}<br>if (testRawScore >= 70) {<br>    gradeEqual = ‘C’;<br>}<br>if (testRawScore >= 60) {<br>    gradeEqual = ‘D’;<br>}<br>System.debug(gradeEqual);<br></pre>" ,"choice":["A" ,"B" ,"C" ,"D"] ,"answer":["D"] ,"feedback_tf":["" ,""]}
, {"question": "以下のソースを実行すると何がデバッグ出力される？<pre><br>Integer z = 5;<br>do {<br>    z = z + 1;<br>} while(z < = 15);<br><br>System.debug(z);<br>]<br></pre>" ,"choice":["13" ,"14" ,"15" ,"16"] ,"answer":["16"] ,"feedback_tf":["" ,""]}
, {"question": "下記コードに関する記述で正しいのはどれ？（２つ選択）<pre><br>public with sharing class containerClass {<br>    //Insert code here<br><br>    public class innerClass {<br>        //Insert code here<br>    }<br>}<br></pre>" ,"choice":["innerClassはcontainerClassの共有設定を継承しない。" ,"[with/without sharing]キーワードは、外部クラスでのみ定義する必要がある。" ,"内部クラスの共有設定デフォルトは、[without sharing]である。" ,"innerClassはcontainerClassの共有設定を継承する。"] ,"answer":["innerClassはcontainerClassの共有設定を継承しない。" ,"内部クラスの共有設定デフォルトは、[without sharing]である。"] ,"feedback_tf":["" ,""]}
, {"question": "以下のソースを実行すると何が起こる？<pre><br>try {<br> String sampleStr;<br> if (sampleStr.contains(‘abcd’)) {<br>  system.debug(‘Hello World’);<br> }<br>}catch(DmlException e) {<br> System.debug(‘DmlException: ‘ + e.getMessage());   ①<br>}catch(SObjectException e) {<br> System.debug(‘SObjectException: ‘ + e.getMessage());   ②<br>}catch(ListException e) {<br> System.debug(‘ListException: ‘ + e.getMessage());   ③<br>}catch(Exception e) {<br> System.debug(‘Exception: ‘ + e.getMessage());  ④<br>}<br></pre>" ,"choice":["④だけ実行" ,"①~④は実行されず、例外発生" ,"①～④全部実行される" ,"①～④は実行されず、例外発生せず"] ,"answer":["④だけ実行"] ,"feedback_tf":["" ,""]}
, {"question": "以下の内、誤ったカスタム例外の投げ方はどれ？" ,"choice":["throw new customExceptionName();" ,"throw new customExceptionName().addError(‘Error Message Here’)" ,"throw new customExceptionName(‘Error Message Here’);" ,"throw new customExceptionName(e);"] ,"answer":["throw new customExceptionName().addError(‘Error Message Here’)"] ,"feedback_tf":["" ,""]}
, {"question": "以下のトリガーはどのイベントで起動すべきですか？<pre><br> Trigger createCallingCard on Contact (EVENT) {<br> List<CallingCard__c> cardList = new List<CallingCard__c>();<br> for (Contact con : Trigger.new) {<br>  CallingCard__c newCard = new CallingCard__c();<br>  newCard.Name = con.Name;<br>  newCard.Phone = con.Phone;<br>  newCard.Address = con.Address;<br>  newCard.relatedContact__c = con.Id;<br>  cardList.add(newCard);<br> }<br> insert cardList;<br>}</pre>" ,"choice":["After Update" ,"Before Delete" ,"After Insert" ,"Before Insert"] ,"answer":[" After Insert"] ,"feedback_tf":["" ,""]}
, {"question": "以下の要件があります。開発者はどのイベントのトリガーを作成すべきですか？項目「isPrimaryContact」＝trueの取引先責任者レコードが削除される度、関連する取引先のhasPrimaryContactフィールドをfalseに更新する" ,"choice":["Before Update" ,"Before Delete" ,"After Update" ,"After Delete"] ,"answer":["After Delete"] ,"feedback_tf":["" ,""]}
]}
